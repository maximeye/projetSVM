dat=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/creditcard.csv",header=T,sep=",")
library(e1071)
dat=dat[,c(5,11,15,31)]
index=sample(1:nrow(dat),150)
dat=dat[index,]
x <- subset(dat, select = -Class)
y <- Class
attach(dat)
dat <- subset(dat, select = -Class)
x <- subset(dat, select = -Class)
y <- Class
model <- svm(x, y)
model <- svm(Class ~ ., data = dat)
dat
#test=sample(1:nrow(dat),20)
#sub=dat[test,]
is.na(dat)
#test=sample(1:nrow(dat),20)
#sub=dat[test,]
is.finite(dat)
model=svm(Class~.,data=sub,kernel="linear",scale=T)
print(model)
x <- subset(dat, select = -Class)
y <- Class
model <- svm(x, y)
x <- subset(na.omit(dat), select = -Class)
y <- na.omitClass
y <- na.omit(Class)
model <- svm(x, y)
class(Class)
class(V4)
class(V10)
class(V14)
as.numeric(Class)
class(Class)
as.numeric(Class)
class(Class)
as.numeric(as.character(Class))
as.numeric(as.character(as.integer(Class)))
as.numeric(Class)
class(Class)
class(Species)
data(iris)
attach(iris)
class(Species)
head(iris)
class(Sepal.Length)
as.factor(Class)
class(Class)
typeof(Class)
as.factor(Class)
typeof(Class)
dat=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/creditcard.csv",header=T,sep=",")
attach(dat)
as.factor(dat.Class)
as.factor(dat$Class)
library(e1071)
dat=dat[,c(5,11,15,31)]
index=sample(1:nrow(dat),150)
dat=dat[index,]
dat
attach(dat)
x <- subset(na.omit(dat), select = -Class)
y <- na.omit(Class)
model <- svm(x, y)
x <- subset(dat, select = -Class)
y <- Class
model <- svm(x, y)
dat=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/creditcard.csv",header=T,sep=",")
summary(dat)
all(!is.na(dat))
which(is.na(x)))
which(is.na(x))
which(is.na(dat))
lapply(donnees,function(dat) which(is.na(dat)))
lapply(dat,function(x) which(is.na(x)))
tail(dat)
which(is.na(dat))
dat$Class= factor(dat$Class, levels = c(0, 1))
class(Class)
dat$Class= factor(dat$Class, levels = c(0, 1))
as.factor(dat$Class)
dat$Class=as.factor(dat$Class)
class(Class)
class(dat$Class)
x <- subset(dat, select = -Class)
y <- Class
model <- svm(x, y)
y <- Class
shiny::runApp('~/Documents/Cours/Master/M1/M1 S2/Nouvelles techno sous R/ChapShiny')
library(e1071)
library(smotefamily)
library(ggplot2)
library(rgl)
library(misc3d)
library(ROCR)
library(leaps)
library(caTools)
data=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/newdat.csv",header=T,sep=",")
data$class=as.factor(data$class)
set.seed(12345)
data=data[,-1]
taille_ech=10000
index=1:nrow(data)
trainindex=sample(index,round(taille_ech*0.7))
train=data[trainindex,]
itest=sample(index,round(taille_ech*0.3))
test=data[itest,]
attach(train)
model=svm(class~.,data=train,kernel="radial",scale=F,cost=105)
w <- t(model$coefs) %*% model$SV
Y=predict(model,newdata = test)
table(test$class,Y)
mean(test$class==Y)
mean(test$class!=Y)
#Taux de bonnes/mauvaises classifications sur ??chantillon complet:
dataa=data[1:60000,]
Y=predict(model,newdata = dataa)
table(dataa$class,Y)
mean(dataa$class==Y)
mean(dataa$class!=Y)
library(e1071)
library(smotefamily)
library(ggplot2)
library(rgl)
library(misc3d)
library(ROCR)
library(leaps)
library(caTools)
#data=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/newdat.csv",header=T,sep=",")
data=read.csv("C:/Users/kevas/Desktop/Cours/M2/Support_Vector_Machine/Dossier_SVM/newdat.csv",header=T,sep=",")
data=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/newdat.csv",header=T,sep=",")
data$class=as.factor(data$class)
set.seed(12345)
data=data[,-1]
taille_ech=10000
index=1:nrow(data)
trainindex=sample(index,round(taille_ech*0.7))
train=data[trainindex,]
itest=sample(index,round(taille_ech*0.3))
test=data[itest,]
attach(train)
model=svm(class~.,data=train,kernel="radial",scale=F,cost=105)
w <- t(model$coefs) %*% model$SV
#Taux de bonnes/mauvaises classifications sur ??chantillon test:
Y=predict(model,newdata = test)
#list(cbind(test, Y), model$index)
table(test$class,Y)
mean(test$class==Y)
mean(test$class!=Y)
dataa=data[1:60000,]
Y=predict(model,newdata = dataa)
#list(cbind(test, Y), model$index)
table(dataa$class,Y)
mean(dataa$class==Y)
mean(dataa$class!=Y)
colors =c("blue","red")
p3d<- plot3d(train$V12, train$V14, train$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(train$V12, train$V14, train$V17, cex=0.5, adj = 1)
length() = 100
grid = expand.grid(seq(from=min(train$V17),to=max(train$V17),length.out=length),
seq(from=min(train$V14),to=max(train$V14),length.out=length))
z = (model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(train$V17[which(train$class==0)], train$V14[which(train$class==0)], train$V12[which(train$class==0)], col='red')
points3d(train$V17[which(train$class==1)], train$V14[which(train$class==1)], train$V12[which(train$class==1)], col='blue')
length= 100
grid = expand.grid(seq(from=min(train$V17),to=max(train$V17),length.out=length),
seq(from=min(train$V14),to=max(train$V14),length.out=length))
z = (model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(train$V17[which(train$class==0)], train$V14[which(train$class==0)], train$V12[which(train$class==0)], col='red')
points3d(train$V17[which(train$class==1)], train$V14[which(train$class==1)], train$V12[which(train$class==1)], col='blue')
model=svm(class~.,data=train,kernel="radial",scale=F,cost=20)
w <- t(model$coefs) %*% model$SV
#Taux de bonnes/mauvaises classifications sur ??chantillon test:
Y=predict(model,newdata = test)
#list(cbind(test, Y), model$index)
table(test$class,Y)
mean(test$class==Y)
mean(test$class!=Y)
#Taux de bonnes/mauvaises classifications sur ??chantillon complet:
dataa=data[1:60000,]
Y=predict(model,newdata = dataa)
#list(cbind(test, Y), model$index)
table(dataa$class,Y)
mean(dataa$class==Y)
mean(dataa$class!=Y)
#Plot ??chantillon APPRENTISSAGE
colors =c("blue","red")
p3d<- plot3d(train$V12, train$V14, train$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(train$V12, train$V14, train$V17, cex=0.5, adj = 1)
#Plot ??chantillon de TEST
colors =c("blue","red")
p3d<- plot3d(test$V12, test$V14, test$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(test$V12, test$V14, test$V17, cex=0.5, adj = 1)
length= 100
grid = expand.grid(seq(from=min(train$V17),to=max(train$V17),length.out=length),
seq(from=min(train$V14),to=max(train$V14),length.out=length))
z = (model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(train$V17[which(train$class==0)], train$V14[which(train$class==0)], train$V12[which(train$class==0)], col='red')
points3d(train$V17[which(train$class==1)], train$V14[which(train$class==1)], train$V12[which(train$class==1)], col='blue')
model=svm(class~.,data=train,kernel="linear",scale=F,cost=20)
w <- t(model$coefs) %*% model$SV
#Taux de bonnes/mauvaises classifications sur ??chantillon test:
Y=predict(model,newdata = test)
#list(cbind(test, Y), model$index)
table(test$class,Y)
mean(test$class==Y)
mean(test$class!=Y)
#Taux de bonnes/mauvaises classifications sur ??chantillon complet:
dataa=data[1:60000,]
Y=predict(model,newdata = dataa)
#list(cbind(test, Y), model$index)
table(dataa$class,Y)
mean(dataa$class==Y)
mean(dataa$class!=Y)
#Plot ??chantillon APPRENTISSAGE
colors =c("blue","red")
p3d<- plot3d(train$V12, train$V14, train$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(train$V12, train$V14, train$V17, cex=0.5, adj = 1)
#Plot ??chantillon de TEST
colors =c("blue","red")
p3d<- plot3d(test$V12, test$V14, test$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(test$V12, test$V14, test$V17, cex=0.5, adj = 1)
length= 100
grid = expand.grid(seq(from=min(train$V17),to=max(train$V17),length.out=length),
seq(from=min(train$V14),to=max(train$V14),length.out=length))
z = (model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(train$V17[which(train$class==0)], train$V14[which(train$class==0)], train$V12[which(train$class==0)], col='red')
points3d(train$V17[which(train$class==1)], train$V14[which(train$class==1)], train$V12[which(train$class==1)], col='blue')
shiny::runApp('~/Documents/Cours/Master/M1/M1 S2/Nouvelles techno sous R/ChapShiny')
head(w)
library(e1071)
library(smotefamily)
library(ggplot2)
library(rgl)
library(misc3d)
library(ROCR)
library(leaps)
library(caTools)
data=read.csv("/Users/Maxime/Documents/Cours/Master/M2/S1/SVM/Docs Projet/newdat.csv",header=T,sep=",")
data$class=as.factor(data$class)
set.seed(12345)
data=data[,-1]
## Début de partitionnage Apprentissage / Test
#Creation d'un ??chantillon d'apprentissage (70%) et test (30%) :
################NE PAS EXECUTER CE QUI SUIT  ############
#index=1:nrow(data)
#testindex=sample(index,397740)
#train=data[testindex,]
#test=data[-testindex,]
#attach(train)
## Echantillon apprentissage pour faire tourner le svm rapidement
taille_ech=10000
index=1:nrow(data)
trainindex=sample(index,round(taille_ech*0.7))
train=data[trainindex,]
itest=sample(index,round(taille_ech*0.3))
test=data[itest,]
attach(train)
###########################################################
###############  SVM kernel linéaire  ###############
model=svm(class~.,data=train,kernel="radial",scale=F,cost=105)
w <- t(model$coefs) %*% model$SV
#Taux de bonnes/mauvaises classifications sur ??chantillon test:
Y=predict(model,newdata = test)
#list(cbind(test, Y), model$index)
table(test$class,Y)
mean(test$class==Y)
mean(test$class!=Y)
#Taux de bonnes/mauvaises classifications sur ??chantillon complet:
dataa=data[1:60000,]
Y=predict(model,newdata = dataa)
#list(cbind(test, Y), model$index)
table(dataa$class,Y)
mean(dataa$class==Y)
mean(dataa$class!=Y)
#Plot ??chantillon APPRENTISSAGE
colors =c("blue","red")
p3d<- plot3d(train$V12, train$V14, train$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(train$V12, train$V14, train$V17, cex=0.5, adj = 1)
#Plot ??chantillon de TEST
colors =c("blue","red")
p3d<- plot3d(test$V12, test$V14, test$V17, xlab="V12", ylab="V14",
zlab="V17",type="s",radius =0.3,
col=as.integer(train$class) ,
box=FALSE, size=5)
text3d(test$V12, test$V14, test$V17, cex=0.5, adj = 1)
length() = 100
grid = expand.grid(seq(from=min(train$V17),to=max(train$V17),length.out=length),
seq(from=min(train$V14),to=max(train$V14),length.out=length))
z = (model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(train$V17[which(train$class==0)], train$V14[which(train$class==0)], train$V12[which(train$class==0)], col='red')
points3d(train$V17[which(train$class==1)], train$V14[which(train$class==1)], train$V12[which(train$class==1)], col='blue')
length = 100
grid = expand.grid(seq(from=min(train$V17),to=max(train$V17),length.out=length),
seq(from=min(train$V14),to=max(train$V14),length.out=length))
z = (model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(train$V17[which(train$class==0)], train$V14[which(train$class==0)], train$V12[which(train$class==0)], col='red')
points3d(train$V17[which(train$class==1)], train$V14[which(train$class==1)], train$V12[which(train$class==1)], col='blue')
tuned <- tune.svm(train$class~., data = train, gamma = 10^(-6:-1), cost = 10^(1:2))
View(train)
attach(train)
tuned <- tune.svm(train$class~V12+V14+V17, data = train, gamma = 10^(-6:-1), cost = 10^(1:2))
tuned <- tune.svm(class~., data = train, gamma = 10^(-6:-1), cost = 10^(1:2))
summary(tuned)
tuned <- tune.svm(class~., data = train, gamma = 10^(-6:-1), cost = 10^(-1:1))
summary(tuned)
