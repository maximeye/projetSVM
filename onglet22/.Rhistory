shiny::runApp()
runApp()
ui <- fluidPage(
fluidRow(
column(12,
"Fluid 12",
fluidRow(
column(6,
"Fluid 6",
fluidRow(
column(6,
"Fluid 6"),
column(6,
"Fluid 6")
)
),
column(width = 6,
"Fluid 6")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('~/Desktop/app/onglet22')
runApp('~/Desktop/app/sauvegarde onglet 22')
runApp('~/Desktop/app/onglet22')
library(e1071)
library(smotefamily)
library(ggplot2)
library(rgl)
library(misc3d)
library(ROCR)
library(leaps)
library(caTools)
library(MASS)
library(ROCR)
library(mlr)
library(FSelector)
library(rpart)
library(gbm)
library(xgboost)
#paralléliser
library(parallelMap)
#démarrer la parallélisation
parallelStartSocket(cpus=4)
set.seed(12345)
data=readRDS("/Users/Maxime/Documents/Cours/Master/M2/M2S1/SVM/projetSVM/new.rds")
data$class=as.factor(data$class)
set.seed(12345)
taille_ech=175000
index=1:nrow(data)
trainindex=sample(index,round(taille_ech*0.55))
train=data[trainindex,]
validateindex=sample(index,round(taille_ech*0.27))
validate=data[validateindex,]
itest=sample(index,round(taille_ech*0.18))
test=data[itest,]
attach(train)
trainTask=makeClassifTask(data=train, target="class")
testTask=makeClassifTask(data=test, target="class")
validateTask=makeClassifTask(data=validate, target="class")
# Let's consider the positive class as 1
trainTask=makeClassifTask(data=train,target="class", positive="1")
# Let's normalize the variables
trainTask=normalizeFeatures(trainTask,method="standardize")
testTask=normalizeFeatures(testTask,method="standardize")
validateTask=normalizeFeatures(validateTask,method="standardize")
# Feature importance of variables
# list of parameters which can be tuned
getParamSet("classif.svm")
# LEARNERS
learner=makeLearner("classif.svm", predict.type="prob")
# RESAMPLE
cv.svm=makeResampleDesc("CV", iters=3, stratify=TRUE)
# Random search
ctrl=makeTuneControlRandom(maxit=3)
param.svm=makeParamSet(
makeDiscreteLearnerParam(id="type",values=c("C-classification", "nu-classification")),
makeDiscreteLearnerParam(id="kernel", values=c("linear", "polynomial", "radial", "sigmoid")),
makeNumericLearnerParam(id="cost", lower=1,upper=100, requires=quote(type == "C-classification")),
makeNumericLearnerParam(id="nu", lower=0,upper=1, requires=quote(type == "nu-classification")),
makeIntegerLearnerParam(id="degree", lower=1,upper=3 ,requires=quote(kernel == "polynomial")),
makeNumericLearnerParam(id="gamma", lower=2^-3,upper=1, requires=quote(kernel != "linear")),
makeLogicalLearnerParam(id="shrinking"))
# Searching the optimal parameters
svm.res=tuneParams(learner, trainTask, resampling=cv.svm,
par.set=param.svm, control=ctrl,measures=acc)
# Searching the optimal parameters
svm.res=tuneParams(learner, validateTask, resampling=cv.svm,
par.set=param.svm, control=ctrl,measures=acc)
